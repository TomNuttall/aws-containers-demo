AWSTemplateFormatVersion: 2010-09-09
Description: 'EventRule, ECR/ECS and GitHub role'

Parameters:
  ProjectPrefix:
    Type: String
    Default: 'demo'
    Description: 'Name of Project prefix'
  ProjectName:
    Type: String
    Description: 'Name of Project'
  ProjectRepo:
    Type: String
    Description: 'Repo Path i.e GitHubUser/RepoName'
  Subnet:
    Type: String
    Description: 'VPC Subnet'
  SecurityGroup:
    Type: String
    Description: 'Security Group'
  Image:
    Type: String
    Description: 'repo:latest'
  IngestBucketName:
    Type: String
    Description: 'S3 Bucket'
  ReportBucketName:
    Type: String
    Description: 'S3 Bucket'

Resources:
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectPrefix}-event-${ProjectName}'
      EventPattern: !Sub |
        {
          "source": [
            "aws.s3"
          ],
          "detail-type": [
            "Object Created"
          ],
          "detail": {
            "bucket": {
              "name": [
                "${IngestBucketName}"
              ]
            },
            "object": {
              "key": [
                {
                  "suffix": ".zip"
                }
              ]
            }
          }
        }
      Targets:
        - Arn: !GetAtt ECSCluster.Arn
          RoleArn: !GetAtt EventRole.Arn
          Id: !Sub '${ProjectPrefix}-event-id-${ProjectName}'
          InputTransformer:
            InputTemplate: !Sub |
              {
                "containerOverrides": [
                  {
                    "name": "${ProjectPrefix}-ecs-task-${ProjectName}",
                    "environment": [
                      {
                        "name": "INGRESS_BUCKET",
                        "value": "<bucket>"
                      },
                      {
                        "name": "S3_KEY",
                        "value": "<keyname>"
                      }
                    ]
                  }
                ]
              }

            InputPathsMap:
              'keyname': '$.detail.object.key'
              'bucket': '$.detail.bucket.name'
          EcsParameters:
            LaunchType: FARGATE
            TaskDefinitionArn: !Ref ECSTask
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                SecurityGroups:
                  - !Ref SecurityGroup
                Subnets:
                  - !Ref Subnet

  EventRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-event'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'events.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-event'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'iam:PassRole'
                Resource: '*'
              - Effect: 'Allow'
                Action: 'ecs:RunTask'
                Resource: !Ref ECSTask

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectPrefix}-ecs-cluster-${ProjectName}'

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ecs/${ProjectPrefix}-ecs-task-${ProjectName}'
      RetentionInDays: 14

  ECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub '${ProjectPrefix}-ecs-task-${ProjectName}'
          Image: !Ref Image
          Essential: true
          Environment:
            - Name: REPORT_BUCKET
              Value: !Ref ReportBucketName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProjectName
      TaskRoleArn: !GetAtt ECSTaskContainerRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      NetworkMode: 'awsvpc'
      Cpu: 1 vCPU
      Memory: 2 GB
      RequiresCompatibilities:
        - 'FARGATE'

  ECSTaskContainerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-ecs-container'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-ecs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:GetBucketLocation'
                  - 's3:ListBucket'
                  - 's3:DeleteObject'
                Resource: !Sub 'arn:aws:s3:::${IngestBucketName}'
              - Effect: 'Allow'
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource: !Sub 'arn:aws:s3:::${ReportBucketName}'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-ecs-task'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-ecs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: logs:*
                Resource: !GetAtt ECSLogGroup.Arn

  ECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'ecs-demo'
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Remove untagged images",
              "selection": {
                "tagStatus": "untagged",
                "countType": "imageCountMoreThan",
                "countNumber": 1
              },
              "action": { "type": "expire" }
            }]
          }
      ImageScanningConfiguration:
        ScanOnPush: true

  GitHubActionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-github-ecr'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: 'sts.amazonaws.com'
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub 'repo:${ProjectRepo}:*'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-github-ecr'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                Resource: !GetAtt ECR.Arn
