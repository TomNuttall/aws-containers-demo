AWSTemplateFormatVersion: 2010-09-09
Description: 'EventRule, ECR/ECS and GitHub role'

Parameters:
  ProjectPrefix:
    Type: String
    Default: 'demo'
    Description: 'Name of Project prefix'
  ProjectName:
    Type: String
    Description: 'Name of Project'
  ProjectRepo:
    Type: String
    Description: 'Repo Path i.e GitHubUser/RepoName'
  # Subnet:
  #   Type: String
  #   Description: 'VPC Subnet'
  # SecurityGroup:
  #   Type: String
  #   Description: 'Security Group'
  Image:
    Type: String
    Description: 'repo:latest'

Resources:
  # ScheduledRule:
  #   Type: AWS::Scheduler::Schedule
  #   Properties:
  #     Description: !Sub '${ProjectPrefix}-scheduler-${ProjectName}'
  #     ScheduleExpression: 'cron(30 12 ? * 1 *)'
  #     FlexibleTimeWindow:
  #       Mode: FLEXIBLE
  #       MaximumWindowInMinutes: 15
  #     Target:
  #       Arn: !GetAtt Lambda.Arn
  #       RoleArn: !GetAtt ScheduleRole.Arn
  #   DependsOn:
  #     - ScheduleRole

  # ScheduleRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-scheduler'
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: 'Allow'
  #           Principal:
  #             Service:
  #               - 'scheduler.amazonaws.com'
  #           Action:
  #             - 'sts:AssumeRole'
  #     Policies:
  #       - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-scheduler'
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: 'Allow'
  #               Action: 'lambda:InvokeFunction'
  #               Resource: !GetAtt Lambda.Arn

  # ECSService:
  #   Type: AWS::ECS::Service
  #   Properties:
  #     ServiceName: !Sub '${ProjectPrefix}-ecs-service-${ProjectName}'
  #     Cluster: !Ref ECSCluster
  #     TaskDefinition: !Ref ECSTask
  #     LaunchType: FARGATE
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: ENABLED
  #         SecurityGroups:
  #           - !Ref SecurityGroup
  #         Subnets:
  #           - !Ref Subnet

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectPrefix}-ecs-cluster-${ProjectName}'

  ECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub '${ProjectPrefix}-ecs-task-${ProjectName}'
          Image: !Ref Image
          Essential: true
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      NetworkMode: 'awsvpc'
      Cpu: 1 vCPU
      Memory: 2 GB
      RequiresCompatibilities:
        - 'FARGATE'

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-github-ecs-task'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'ecs-demo'
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Remove untagged images",
              "selection": {
                "tagStatus": "untagged",
                "countType": "imageCountMoreThan",
                "countNumber": 1
              },
              "action": { "type": "expire" }
            }]
          }
      ImageScanningConfiguration:
        ScanOnPush: true

  GitHubActionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-github-ecr'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: 'sts.amazonaws.com'
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub 'repo:${ProjectRepo}:*'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-github-lambda'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                Resource: !GetAtt ECR.Arn
