AWSTemplateFormatVersion: 2010-09-09
Description: 'EventRule, ECR/ECS and GitHub role'

Parameters:
  ProjectPrefix:
    Type: String
    Default: 'demo'
    Description: 'Name of Project prefix'
  ProjectName:
    Type: String
    Description: 'Name of Project'
  ProjectRepo:
    Type: String
    Description: 'Repo Path i.e GitHubUser/RepoName'
  Subnet:
    Type: String
    Description: 'VPC Subnet'
  SecurityGroup:
    Type: String
    Description: 'Security Group'
  Image:
    Type: String
    Description: 'repo:latest'
  # Storage:
  #   Type: String
  #   Description: 'S3 Bucket Arn'

Resources:
  ScheduledRule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: !Sub '${ProjectPrefix}-scheduler-${ProjectName}'
      ScheduleExpression: 'cron(30 9 1 * ? *)'
      FlexibleTimeWindow:
        Mode: FLEXIBLE
        MaximumWindowInMinutes: 15
      Target:
        Arn: !GetAtt ECSCluster.Arn
        RoleArn: !GetAtt ScheduleRole.Arn
        EcsParameters:
          LaunchType: FARGATE
          TaskDefinitionArn: !Ref ECSTask
          NetworkConfiguration:
            AwsvpcConfiguration:
              AssignPublicIp: ENABLED
              SecurityGroups:
                - !Ref SecurityGroup
              Subnets:
                - !Ref Subnet

  ScheduleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-scheduler'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'scheduler.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-scheduler'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'iam:PassRole'
                Resource: '*'
              - Effect: 'Allow'
                Action: 'ecs:RunTask'
                Resource: !Ref ECSTask

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectPrefix}-ecs-cluster-${ProjectName}'

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ecs/${ProjectPrefix}-ecs-task-${ProjectName}'
      RetentionInDays: 14

  ECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub '${ProjectPrefix}-ecs-task-${ProjectName}'
          Image: !Ref Image
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ProjectName
      #TaskRoleArn: !GetAtt ECSTaskContainerRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      NetworkMode: 'awsvpc'
      Cpu: 1 vCPU
      Memory: 2 GB
      RequiresCompatibilities:
        - 'FARGATE'

  # ECSTaskContainerRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-ecs-container'
  #     Policies:
  #       - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-ecs'
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: 'Allow'
  #               Action: s3:*
  #               Resource: !Ref Storage

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-ecs-task'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-ecs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: logs:*
                Resource: !GetAtt ECSLogGroup.Arn

  ECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'ecs-demo'
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Remove untagged images",
              "selection": {
                "tagStatus": "untagged",
                "countType": "imageCountMoreThan",
                "countNumber": 1
              },
              "action": { "type": "expire" }
            }]
          }
      ImageScanningConfiguration:
        ScanOnPush: true

  GitHubActionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectPrefix}-role-${ProjectName}-github-ecr'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: 'sts.amazonaws.com'
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub 'repo:${ProjectRepo}:*'
      Policies:
        - PolicyName: !Sub '${ProjectPrefix}-policy-${ProjectName}-github-ecr'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                Resource: !GetAtt ECR.Arn
